# Copyright 2018 Open Trust Group
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

if [[ -n "${ZSH_VERSION}" ]]; then
  devshell_lib_dir=${${(%):-%x}:a:h}
else
  devshell_lib_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi

export OTG_ROOT_DIR="$(dirname $(dirname $(dirname $(dirname $(dirname $(dirname "${devshell_lib_dir}"))))))"
unset devshell_lib_dir

export OTG_TOOLCHAIN_CONFIG="${OTG_ROOT_DIR}/.otg-toolchain-config"
export OTG_CONFIG="${OTG_ROOT_DIR}/.otg-config"
export OTG_VENDOR_PATH="${OTG_ROOT_DIR}/scripts/vendor/otg"
export OTG_PROJECTS_SCRIPT_PATH="${OTG_VENDOR_PATH}/scripts/projects"
export OTG_PREBUILT_BINARY_PATH="${OTG_VENDOR_PATH}/prebuilt"
export OTG_OUT_DIR="${OTG_ROOT_DIR}/out-otg"
export OTG_UBOOT_OUT_DIR="${OTG_OUT_DIR}/build-uboot"
export OTG_ATF_OUT_DIR="${OTG_OUT_DIR}/build-atf"
export OTG_IMAGES_DIR="${OTG_OUT_DIR}/images"

HOST_ARCH="$(uname -m)"
HOST_OS="$(uname | tr '[:upper:]' '[:lower:]')"
HOST_TRIPLE="${HOST_ARCH}-${HOST_OS}"

export THIRD_PARTY_QEMU="${OTG_PREBUILT_BINARY_PATH}/qemu-${HOST_TRIPLE}"

function otg-read-config {
  if [[ ! -f "${OTG_CONFIG}" ]]; then
    echo >& 2 "error: Cannot read config from ${OTG_CONFIG}. Did you run \"fx vendor otg set\"?"
    exit 1
  fi

  if [[ ! -f "${OTG_TOOLCHAIN_CONFIG}" ]]; then
    echo >& 2 "error: Cannot read toolchain config from ${OTG_TOOLCHAIN_CONFIG}. Did you run \"fx vendor otg download-toolchain\"?"
    exit 1
  fi

  source "${OTG_CONFIG}"
  source "${OTG_TOOLCHAIN_CONFIG}"

  export OTG_TEE_OUT_DIR="${OTG_ROOT_DIR}/out-${TEE}"
  export OTG_REE_OUT_DIR="${OTG_ROOT_DIR}/out-${REE}"
  export OTG_REE_BOOT_PARAM="${OTG_REE_OUT_DIR}/boot.param"
  export OTG_TEE_BOOT_PARAM="${OTG_TEE_OUT_DIR}/boot.param"

  return 0
}

function otg-write-config {
  tee=$1
  ree=$2
  echo > "${OTG_CONFIG}" "\
# Generated by \`fx vendor otg set\`.
TEE='${tee}'
REE='${ree}'
"
}

function otg-list-projects {
  local tee_list="$(ls ${OTG_PROJECTS_SCRIPT_PATH}/tee/* | xargs -I{} basename {})"
  local ree_list="$(ls ${OTG_PROJECTS_SCRIPT_PATH}/ree/* | xargs -I{} basename {})"

  echo "available TEE targets:"
  echo "-------------------"
  for p in ${tee_list}; do
    printf "%-25s\n" "${p}"
  done

  printf "\n\n"
  echo "available REE targets:"
  echo "-------------------"
  for p in ${ree_list}; do
    printf "%-25s\n" "${p}"
  done

  return 0
}

function otg-command-run {
  local -r command_name="$1"
  local -r command_path="${OTG_VENDOR_PATH}/scripts/devshell/${command_name}"

  if [[ ! -f "${command_path}" ]]; then
    echo >& 2 "error: Unknown command ${command_name}"
    exit 1
  fi

  shift
  "${command_path}" "$@"
}

function otg-print-command-help {
  local -r command_path="$1"
  if grep '^## ' "$command_path" > /dev/null; then
    sed -n -e 's/^## //p' -e 's/^##$//p' < "$command_path"
  else
    local -r command_name=$(basename "$command_path")
    echo "No help found. Try \`fx $command_name -h\`"
  fi
}

function otg-command-help {
  otg-print-command-help "$0"
}

function otg-save-ree-boot-param {
  printf "\nSave REE boot parameter to ${OTG_REE_BOOT_PARAM}\n"

  echo > "${OTG_REE_BOOT_PARAM}" "\
KERNEL_IMG='$1'
INITRD_IMG='$2'
KERNEL_CMDLINE='$3'
"
  cat ${OTG_REE_BOOT_PARAM}
}

function otg-save-tee-boot-param {
  printf "\nSave TEE boot parameter to ${OTG_TEE_BOOT_PARAM}\n"

  echo > "${OTG_TEE_BOOT_PARAM}" "\
ATF_SPD='$1'
BL32_IMG='$2'
BL32_EXTRA1_IMG='$3'
BL32_EXTRA2_IMG='$4'
"
  cat ${OTG_TEE_BOOT_PARAM}
}
