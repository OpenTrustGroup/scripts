#!/bin/bash
# Copyright 2018 Open Trust Group
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

### build Linux kernel

source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"/lib/vars.sh
otg-read-config

readonly LINUX_BUILDROOT="${OTG_REE_OUT_DIR}/build-linux"
readonly LINUX_PATH="${OTG_ROOT_DIR}/linux"
readonly LINUX_ARCH="arm64"
readonly LINUX_PREBUILT_DIR="${OTG_PREBUILT_BINARY_PATH}/linux"
readonly LINUX_KCONFIG_DIR="${OTG_ROOT_DIR}/scripts/kconfigs"
readonly TOOLCHAIN_PREFIX="${LINARO_AARCH64_CROSS_COMPILE}"

JOBS=`getconf _NPROCESSORS_ONLN` || {
  Cannot get number of processors
  exit 1
}

set -eo pipefail; [[ "${TRACE}" ]] && set -x


declare VERBOSE="${VERBOSE:-0}"
declare CLEAN="${CLEAN:-false}"
declare PLATFORM="${PLATFORM:-qemu}"
declare LINUX_FLAGS="LOCALVERSION= O=${LINUX_BUILDROOT} ARCH=${LINUX_ARCH}"

usage() {
  printf '%s: [-c] [-v] [-p platform]\n' "$0"
  printf '  -c            clean & build\n'
  printf '  -v            show verbose compiling messages\n'
  printf '  -p [platform] select which platform to build, default: %s\n' "${PLATFORM}"
}

while getopts "chp:v" opt; do
  case "${opt}" in
    c) CLEAN="true" ;;
    h) usage ; exit 0 ;;
    p) PLATFORM="${OPTARG}" ;;
    v) VERBOSE="1" ;;
    *) usage 1>&2 ; exit 1 ;;
  esac
done

if [[ "${CLEAN}" = "true" ]]; then
  echo "Cleaning linux..."
  rm -rf -- "${LINUX_BUILDROOT}"
fi

if [[ "${USE_CCACHE}" = "1" ]]; then
  export CROSS_COMPILE="$(which ccache) ${TOOLCHAIN_PREFIX}"
else
  export CROSS_COMPILE="${TOOLCHAIN_PREFIX}"
fi

# Download source code if not existed
if [[ ! -d "${LINUX_PATH}" ]]; then
  cd ${OTG_ROOT_DIR}
  git clone --depth 1 --branch gzos https://review.gerrithub.io/OpenTrustGroup/linux
fi

echo "Building linux..."

mkdir -p ${LINUX_BUILDROOT}

# Generate Linux .config file
cd ${LINUX_PATH} && \
ARCH=${LINUX_ARCH} \
scripts/kconfig/merge_config.sh -O ${LINUX_BUILDROOT} ${LINUX_PATH}/arch/arm64/configs/defconfig ${LINUX_KCONFIG_DIR}/${PLATFORM}.conf

make -j ${JOBS} V=${VERBOSE} ${LINUX_FLAGS}

echo ""
echo "Updating linux prebuilt image... "
cp ${LINUX_BUILDROOT}/vmlinux ${LINUX_PREBUILT_DIR}/
cp ${LINUX_BUILDROOT}/System.map ${LINUX_PREBUILT_DIR}/
cp ${LINUX_BUILDROOT}/arch/${LINUX_ARCH}/boot/Image ${LINUX_PREBUILT_DIR}/
cp ${LINUX_BUILDROOT}/usr/gen_init_cpio ${LINUX_PREBUILT_DIR}/

echo "Compressing vmlinux... "
lzma -z2f ${LINUX_PREBUILT_DIR}/vmlinux

last_commit="$(git log -1 --pretty=oneline)"

LIGHT_RED='\033[1;31m'
NC='\033[0m' # No Color
NOTICE="${LIGHT_RED}NOTICE:${NC}"

echo ""
cp ${LINUX_BUILDROOT}/.config ${LINUX_PREBUILT_DIR}/config
echo ${last_commit} > ${LINUX_PREBUILT_DIR}/last_commit
echo -e "${NOTICE} Linux prebuilt is updated. Remember to submit patch to gerrit for review."
echo -e "${NOTICE} (file path: ${LINUX_PREBUILT_DIR})"
echo ""
