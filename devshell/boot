#!/bin/bash
# Copyright 2017 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

### run bootserver in zedboot disk paver mode

## usage: fx boot [--netboot] [--no-data]
##                [--artifacts <dir>]
##                [<type>] [bootserver arguments]
##   <type>        see "--help" for list (default: x64 for x64 / none for arm64)
##   --netboot     Boot from ramdisk containing FVM
##   --no-data     Use FVM images without a /data partition (preserve existing
##                 data)
##   --artifacts   a directory to load files to send to the target where the
##                 root of the directory base zircon.bin and its bootdata file
##                 and an images sub-directory has all the images to pave
##
## If <type> is omitted, a guess is made based on $FUCHSIA_ARCH. For x64, all
## x64 images will be supplied (resulting in an FVM pave). For arm64 the default
## <type> is netboot.

set -e

source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"/lib/image_build_vars.sh

declare -a disks=()
fuchsia_dir="${FUCHSIA_BUILD_DIR}"
zircon_dir="${ZIRCON_BUILD_DIR}"
zircon_tools="${ZIRCON_TOOLS_DIR}"
add_fvm=true

usage() {
    fx-command-help
    fx-machine-types
    echo
    echo "Additional bootserver arguments:"
    exec "${ZIRCON_TOOLS_DIR}/bootserver" --help
}

netboot=false
add_data=true
ip_targ=()
while [[ "$1" =~ ^- ]]; do
  case "$1" in
  -h|--help)
    usage
    ;;
  -a)
    shift
    ip_targ=("-a" "$1")
    ;;
  --netboot)
    netboot=true
    ;;
  --no-data)
    echo "##"
    echo "## Note: if the target has no pre-existing data partition, then"
    echo "## none will be created. The resultant system will behave in a"
    echo "## kind of 'incognito' fashion, as /data will be backed by ram."
    echo "##"
    add_data=false
    ;;
  --artifacts)
    shift
    fuchsia_dir="${1}"
    zircon_dir="${1}"
    zircon_tools="${zircon_dir}/tools"

    # Source the image paths from the artifacts directory, so we can find them.
    source "${fuchsia_dir}"/zedboot_image_paths.sh
    source "${fuchsia_dir}"/image_paths.sh
    ;;
  *)
    break
  esac
  shift
done

ramdisk="${fuchsia_dir}/${IMAGE_BOOT_RAM}"

if [[ "$1" =~ ^- ]]; then
  machine_type=""
else
  machine_type="$1"
  # passing no arguments is valid, but shift will terminate with set -e
  if [[ $# -ge 1 ]]; then
    shift
  fi
fi

if [[ -z "$machine_type" ]]; then
  if $netboot; then
    machine_type="netboot"
  fi
fi

case "${machine_type}" in
  help)
    usage
  ;;
  zedboot)
    ramdisk="${fuchsia_dir}/${IMAGE_ZEDBOOT_ZBI}"
    disks=()
    add_fvm=false
  ;;
  ram|netboot|--netboot)
    ramdisk="${fuchsia_dir}/${IMAGE_NETBOOT_RAM}"
    disks=()
    add_fvm=false
  ;;
  cros|pixel|vboot|efi|acer|nuc)
    disks=("${disks[@]}" --efi "${fuchsia_dir}/${IMAGE_ESP_RAW}")
    disks=("${disks[@]}" --kernc "${fuchsia_dir}/${IMAGE_ZIRCON_VBOOT}")
  ;;
  arm)
    disks=("${disks[@]}" --zircona "${fuchsia_dir}/${IMAGE_ZIRCONA_ZBI}"
      --zirconr "${fuchsia_dir}/${IMAGE_ZIRCONR_ZBI}")
  ;;
  *)
    if [[ "$FUCHSIA_ARCH" == "x64" ]]; then
      machine_type="x64"
      disks=("${disks[@]}" --efi "${fuchsia_dir}/${IMAGE_ESP_RAW}" \
        --kernc "${fuchsia_dir}/${IMAGE_ZIRCON_VBOOT}")
    else
      machine_type="arm64"
      disks=("${disks[@]}" --zircona "${fuchsia_dir}/${IMAGE_ZIRCONA_ZBI}"
        --zirconr "${fuchsia_dir}/${IMAGE_ZIRCONR_ZBI}")
    fi
esac

# XXX(raggi): this is ugly, but we want to retain argument pass-through to
# bootserver
bootserver_args=()
if ! $add_fvm; then
  bootserver_args=("$@")
else
  disks=("${disks[@]}" --fvm "${fuchsia_dir}/${IMAGE_FVM_SPARSE}")

  while [[ $# -gt 0 ]]; do
      bootserver_args=("${bootserver_args[@]}" "$1")
      shift
  done

  if $add_data; then
    disks=("${disks[@]}" --fvm "${fuchsia_dir}/${IMAGE_DATA_FVM_RAW}")
  fi
fi

exec "${zircon_tools}/bootserver" \
  "${ip_targ[@]}" \
  "${disks[@]}" \
  "${zircon_dir}/zircon.bin" \
  "${ramdisk}" \
  "${bootserver_args[@]}"
