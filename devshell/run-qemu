#!/bin/bash
# Copyright 2017 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

### start TEE in qemu

source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"/lib/image_build_vars.sh
source "${FUCHSIA_DIR}/buildtools/vars.sh"

set -e; [[ "${TRACE}" ]] && set -x

if [[ -d "${THIRD_PARTY_QEMU}" ]]; then
  qemu_dir="${THIRD_PARTY_QEMU}/bin"
else
  qemu_dir="${BUILDTOOLS_QEMU_DIR}/bin"
fi

readonly ATF_BUILDROOT="${FUCHSIA_OUT_DIR}/build-atf"
readonly LINUX_BUILDROOT="${FUCHSIA_OUT_DIR}/build-linux"
readonly LINUX_PREBUILT_DIR="${FUCHSIA_DIR}/scripts/prebuilt/linux"
readonly ROOTFS_BUILDROOT="${FUCHSIA_OUT_DIR}/build-linux-rootfs"
readonly SOC_TERM_PATH="${FUCHSIA_DIR}/third_party/soc_term"
readonly gnome_terminal="$(command -v gnome-terminal 2>/dev/null)"
readonly xterm="$(command -v xterm 2>/dev/null)"

readonly DTB_FILE="${FUCHSIA_DIR}/qemu-virt.dtb"
readonly DTS_FILE="${FUCHSIA_DIR}/qemu-virt.dts"

declare DUMP_DEVICE_TREE=false
declare RUN_CI_TEST=""
declare QEMU_CMD=""
declare QEMU_EXTRA_ARGS=""
#QEMU_EXTRA_ARGS="${QEMU_EXTRA_ARGS} -d guest_errors" # Show error messages when accessing registers

launch-terminal() {
  if [[ ! -z "${tmux}" ]]; then
    nc -z  127.0.0.1 ${1} || ${tmux} new-window -a -n "${2}" ${SOC_TERM_PATH}/soc_term ${1}
  elif [[ ! -z "${gnome_terminal}" ]];then
    nc -z  127.0.0.1 ${1} || ${gnome_terminal} -t "${2}" -x ${SOC_TERM_PATH}/soc_term ${1} &
  elif [[ ! -z "${xterm}" ]];then
    nc -z  127.0.0.1 ${1} || ${xterm} -title "${2}" -e ${BASH} -c "${SOC_TERM_PATH}/soc_term ${1}" &
  else
    echo "Error: could not find gnome-terminal nor xterm"
    exit 1
  fi
}

run-help() {
  echo
  echo \* QEMU is now waiting to start the execution
  echo \* Start execution with either a \'c\' followed by \<enter\> in the QEMU console or
  echo \* attach a debugger and continue from there.
  echo
}

wait-for-ports() {
  while ! nc -z 127.0.0.1 ${1} || ! nc -z 127.0.0.1 ${2}; do sleep 1; done
}

launch_qemu() {
  cd ${ATF_BUILDROOT}/images/
  eval ${QEMU_CMD}
}

usage() {
  printf '%s: [-t|-x|-c <test pattern>]\n' "$0"
  printf '  -t                   dump QEMU device tree (dtb, dts) to %s\n' ${FUCHSIA_DIR}
  printf '  -x                   output QEMU serial logs to TMUX instead of gnome-terminal/xterm\n'
  printf '  -c [test pattern]    run CI test. 'all' for running all test cases\n'
}

while getopts "txc:" opt; do
  case "${opt}" in
    t)
      DUMP_DEVICE_TREE=true
      ;;
    x)
      if [[ ! -z "${TMUX}" ]]; then
        readonly tmux="$(command -v tmux 2>/dev/null)"
      else
        echo "Warning: tmux is not running, ignore."
      fi
      ;;
    c)
      RUN_CI_TEST=$OPTARG
      ;;
    *) usage 1>&2 ; exit 1 ;;
  esac
done


QEMU_COMMON_CMD="${qemu_dir}/qemu-system-aarch64
 -nographic
 -machine virt,secure=on -cpu cortex-a53
 -m 1057 -bios ${ATF_BUILDROOT}/images/bl1.bin
 -semihosting-config enable,target=native -d unimp
 -initrd ${ROOTFS_BUILDROOT}/filesystem.cpio.gz
 -kernel ${LINUX_PREBUILT_DIR}/Image -no-acpi
 -append 'console=ttyAMA0,38400 keep_bootcon root=/dev/vda2'"

if ${DUMP_DEVICE_TREE}; then
  QEMU_EXTRA_ARGS="${QEMU_EXTRA_ARGS} -machine dumpdtb=${DTB_FILE}"
  QEMU_CMD="${QEMU_COMMON_CMD} ${QEMU_EXTRA_ARGS}"

  launch_qemu
  dtc -I dtb -O dts ${DTB_FILE} > ${DTS_FILE}
elif [ ! -z "${RUN_CI_TEST}" ]; then
  if [[ "${TEE}" = "gzos" ]]; then
    QEMU_SERIAL_FLAGS="-serial file:${FUCHSIA_DIR}/serial0.log -serial stdio"
  else
    QEMU_SERIAL_FLAGS="-serial stdio -serial file:${FUCHSIA_DIR}/serial1.log"
  fi
  QEMU_EXTRA_ARGS="${QEMU_EXTRA_ARGS} -monitor none"
  QEMU_CMD="${QEMU_COMMON_CMD} ${QEMU_SERIAL_FLAGS} ${QEMU_EXTRA_ARGS}"

  "${FUCHSIA_DIR}/scripts/run-test-qemu.py" "-s${TEE}" "-c${QEMU_CMD}" "-t${RUN_CI_TEST}"
else
  QEMU_SERIAL_FLAGS="-serial tcp:localhost:54320 -serial tcp:localhost:54321"
  QEMU_GDB_DEBUG_FLAGS="-s -S"
  QEMU_CMD="${QEMU_COMMON_CMD} ${QEMU_SERIAL_FLAGS} ${QEMU_GDB_DEBUG_FLAGS} ${QEMU_EXTRA_ARGS}"

  run-help
  launch-terminal 54320 "Normal World"
  launch-terminal 54321 "Secure World"
  wait-for-ports 54320 54321
  launch_qemu
fi
